import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {
  
    public static int balancedSum(List<Integer> arr) {
    // Write your code here
   int right_sum = 0, left_sum = 0; 
   
 
       Integer[] myArray = new Integer[arr.size()];
      arr.toArray(myArray);
     
        // Computing right_sum 
        for (int i = 1; i < myArray.length; i++) 
            right_sum += myArray[i]; 
       
        // Checking the point of partition 
        // i.e. left_Sum == right_sum 
        for (int i = 0, j = 1; j < myArray.length; i++, j++) { 
            right_sum -= myArray[j]; 
            left_sum += myArray[i]; 
       
            if (left_sum == right_sum) 
                return i + 1; 
        } 
       
        return -1;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < arrCount; i++) {
            int arrItem = Integer.parseInt(bufferedReader.readLine().trim());
            arr.add(arrItem);
        }
   // System.out.print(arr);
        int result = Result.balancedSum(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}


Explanation of the Output:
arr=[2,1,3,3]
for this array it returns the index of 3 which is 2.
2+1=3
Last number 3
Equilibrium pivot:3
